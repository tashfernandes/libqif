name: build
on: [push]

jobs:
  # Build wheels on all platforms ########################################################
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0    # needed for tags


    - uses: actions/setup-python@v5
      name: Install Python
      with:
        python-version: '3.12'

    - name: Verify Python version
      run: python --version
        
    #- name: Install other things
    #  run: sudo apt-get install -qy libgmp-dev libglpk-dev libgsl0-dev lsb-release
      
    - name: Build wheels
      env:
        CIBW_BEFORE_BUILD: |
          #python3 -m pip install --upgrade pip
          #python3 -m pip install --upgrade scikit-build cmake pybind11 ninja python3-sphinx
          bash .github/workflows/prepare-build-linux.sh
        CIBW_BUILD: "cp312-manylinux_x86_64"
        CIBW_BUILD_VERBOSITY: 1
        CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/chatziko/libqif/manylinux:v9
        #CIBW_BEFORE_ALL_LINUX: bash .github/workflows/prepare-build-linux.sh
        #CIBW_BEFORE_ALL_MACOS: bash .github/workflows/prepare-build-macos.sh
        #CIBW_BEFORE_ALL_WINDOWS: bash .github/workflows/prepare-build-windows.sh

        CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -L /.libs -w {dest_dir} {wheel}  # -L /.libs puts the libs under "qif/.libs"
        #CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel -v -w {dest_dir} {wheel}            # --require-archs x86_64 (this throws error for some reason)
        #CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: pip install pefile machomachomangler && python .github/workflows/repair-wheel-windows.py {wheel} -w {dest_dir}

        # Workaround: cibuildwheel runs "pip wheel", which copies the lib_python dir to a temporary directory. This is
        # problematic because the code in lib_python expects to have the project root as parent dir. To workaround this
        # we pass the project root as TMPDIR, which causes "pip wheel" to create its temp dir inside the project root,
        # so its parent will be the project root as expected!
        # CIBW_ENVIRONMENT: "TMPDIR=$PWD Python3_EXECUTABLE=$(which python) Python3_FIND_STRATEGY=LOCATION"
        CIBW_ENVIRONMENT: "TMPDIR=$PWD PYTHON_EXECUTABLE=$PYTHON Python_EXECUTABLE=$PYTHON Python_FIND_STRATEGY=LOCATION"

        # Windows CMAKE configuration
        # CMAKE_TOOLCHAIN_FILE  find the libraries installed via vcpkg
        # CMAKE_PREFIX_PATH     find the libraries installed in git bash's /usr/local
        # BUILD_QIF             force to re-build qif_cpp when building qif_python (the default is to use the system's qif)
        CIBW_ENVIRONMENT_WINDOWS: "TMPDIR=. CMAKE_TOOLCHAIN_FILE='C:/vcpkg/scripts/buildsystems/vcpkg.cmake' CMAKE_PREFIX_PATH='C:/Program Files/Git/usr/local' BUILD_QIF=1"

      run: |
        python3 -m pip install cibuildwheel
        python3 -m cibuildwheel --output-dir wheelhouse lib_python
        mkdir wheelhouse/dist && mv wheelhouse/*.whl wheelhouse/dist/

    - uses: actions/upload-artifact@v4
      with:
        path: ./wheelhouse/

